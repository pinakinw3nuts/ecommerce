version: '3.8'

services:
  # API Gateway - Entry point for all requests
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: ecom-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOST=0.0.0.0
      - REDIS_URL=redis://redis:6379
      - RATE_LIMIT_MAX=100
      - RATE_LIMIT_WINDOW_MS=60000
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
      # Microservices URLs
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - PRODUCT_SERVICE_URL=http://product-service:3003
      - CART_SERVICE_URL=http://cart-service:3004
      - CHECKOUT_SERVICE_URL=http://checkout-service:3005
      - ORDER_SERVICE_URL=http://order-service:3006
      - PAYMENT_SERVICE_URL=http://payment-service:3007
      - SHIPPING_SERVICE_URL=http://shipping-service:3008
      - INVENTORY_SERVICE_URL=http://inventory-service:3009
      - COMPANY_SERVICE_URL=http://company-service:3010
      - PRICING_SERVICE_URL=http://pricing-service:3011
      - ADMIN_SERVICE_URL=http://admin-service:3012
      - WISHLIST_SERVICE_URL=http://wishlist-service:3013
      - REVIEW_SERVICE_URL=http://review-service:3014
      - NOTIFICATION_SERVICE_URL=http://notification-service:3015
      - CMS_SERVICE_URL=http://cms-service:3016
    depends_on:
      - redis
      - auth-service
      - user-service
      - product-service
      - cart-service
      - checkout-service
      - order-service
      - payment-service
      - shipping-service
      - inventory-service
      - company-service
      - pricing-service
      - admin-service
      - wishlist-service
      - review-service
      - notification-service
      - cms-service
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # Redis - Cache and rate limiting
  redis:
    image: redis:7-alpine
    container_name: ecom-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  # PostgreSQL - Main database
  postgres:
    image: postgres:15-alpine
    container_name: ecom-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_DB=ecommerce
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: ecom-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=auth_db
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET:-your-jwt-refresh-secret-key}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: ecom-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=user_db
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Product Service
  product-service:
    build:
      context: ./services/product-service
      dockerfile: Dockerfile
    container_name: ecom-product-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=product_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Cart Service
  cart-service:
    build:
      context: ./services/cart-service
      dockerfile: Dockerfile
    container_name: ecom-cart-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=cart_db
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Checkout Service
  checkout-service:
    build:
      context: ./services/checkout-service
      dockerfile: Dockerfile
    container_name: ecom-checkout-service
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=checkout_db
      - CART_SERVICE_URL=http://cart-service:3004
      - PAYMENT_SERVICE_URL=http://payment-service:3007
      - ORDER_SERVICE_URL=http://order-service:3006
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      cart-service:
        condition: service_started
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Order Service
  order-service:
    build:
      context: ./services/order-service
      dockerfile: Dockerfile
    container_name: ecom-order-service
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=order_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    container_name: ecom-payment-service
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=payment_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3007/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Shipping Service
  shipping-service:
    build:
      context: ./services/shipping-service
      dockerfile: Dockerfile
    container_name: ecom-shipping-service
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=shipping_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3008/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Inventory Service
  inventory-service:
    build:
      context: ./services/inventory-service
      dockerfile: Dockerfile
    container_name: ecom-inventory-service
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=production
      - PORT=3009
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=inventory_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3009/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Company Service
  company-service:
    build:
      context: ./services/company-service
      dockerfile: Dockerfile
    container_name: ecom-company-service
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=company_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3010/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Pricing Service
  pricing-service:
    build:
      context: ./services/pricing-service
      dockerfile: Dockerfile
    container_name: ecom-pricing-service
    ports:
      - "3011:3011"
    environment:
      - NODE_ENV=production
      - PORT=3011
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=pricing_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3011/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    container_name: ecom-admin-service
    ports:
      - "3012:3012"
    environment:
      - NODE_ENV=production
      - PORT=3012
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=admin_db
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3012/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Wishlist Service
  wishlist-service:
    build:
      context: ./services/wishlist-service
      dockerfile: Dockerfile
    container_name: ecom-wishlist-service
    ports:
      - "3013:3013"
    environment:
      - NODE_ENV=production
      - PORT=3013
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=wishlist_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3013/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Review Service
  review-service:
    build:
      context: ./services/review-service
      dockerfile: Dockerfile
    container_name: ecom-review-service
    ports:
      - "3014:3014"
    environment:
      - NODE_ENV=production
      - PORT=3014
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=review_db
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3014/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: ecom-notification-service
    ports:
      - "3015:3015"
    environment:
      - NODE_ENV=production
      - PORT=3015
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=notification_db
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3015/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # CMS Service
  cms-service:
    build:
      context: ./services/cms-service
      dockerfile: Dockerfile
    container_name: ecom-cms-service
    ports:
      - "3016:3016"
    environment:
      - NODE_ENV=production
      - PORT=3016
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres123
      - DB_NAME=cms_db
      - PAYLOAD_SECRET=${PAYLOAD_SECRET:-random-secret-key-for-payload-cms}
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3016/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Storefront - Next.js Frontend
  storefront:
    build:
      context: ./apps/storefront
      dockerfile: Dockerfile
    container_name: ecom-storefront
    ports:
      - "3100:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
    depends_on:
      - api-gateway
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Admin Panel - Next.js Frontend
  admin-panel:
    build:
      context: ./apps/admin-panel
      dockerfile: Dockerfile
    container_name: ecom-admin-panel
    ports:
      - "3101:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3000/api
    depends_on:
      - api-gateway
    networks:
      - ecom-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  redis-data:
    name: ecom-redis-data
  postgres_data:
    name: ecom-postgres-data

networks:
  ecom-network:
    name: ecom-network
    driver: bridge 